 r←{noBetas}GetBestVersionNumber path;id;list;buff;list2;level;version;best;path_
⍝ Establishes the best version number for ⍵
⍝ '{group}-{name}-3.0.0' ← GetBestVersionNumber '{name}'
⍝ '{group}-{name}-3.0.0' ← GetBestVersionNumber '{group}-{name}'
⍝ '{group}-{name}-2.1.0' ← GetBestVersionNumber '{group}-{name}-2'
⍝ '{group}-{name}-1.2.1' ← GetBestVersionNumber '{group}-{name}-1'
⍝ '{group}-{name}-1.1.9' ← GetBestVersionNumber '{group}-{name}-1.1'
⍝ Returns an empty vector in case nothing fits
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ GetNoBetasDefault}'noBetas '
 r←''
 id←(≢RemovePackageID path)↓path
 path_←(-≢id)↓path
 :If IsValidPackageName id
     ⍝ We first need to establish the group:
     path←{⍵↓⍨-≢'/\'A.Last ⍵}path
     :If 0=≢buff←⊃F.ListDirs path,'*-',id
         :Return
     :EndIf
     id←({⍵↑⍨⍵⍳'-'}{⍵↑⍨1+-⌊/(⌽⍵)⍳'/\'}buff),id
     path,←id
 :EndIf
 level←⊃'-'+.=id
 :If 0<≢list←,GetAllPackages path_
 :AndIf 0<≢list←('.zip'∘≢¨⎕C¨3⊃∘⎕NPARTS¨list)/list
 :AndIf 0<≢list←((⎕C id){⍺∘≡¨⎕C(≢⍺)↑¨⍵}list)/list
     :If 1=level
         list←('-'=⊃¨1↑¨(≢id)↓¨list)/list
     :EndIf
     :If 0<≢list
         :If noBetas
         :AndIf 0=≢list←({3>⌈/+\'-'=⍵}¨list)/list   ⍝ Remove all beta versions
             :Return
         :EndIf
         list2←path_ InjectPublishingDate list      ⍝ Add publishing date where required
         list←list[SortIndexForPackageIDs list2]
     :EndIf
     best←⊃¯1↑list
     version←{1↓⍵/⍨2≤+\'-'=⍵}⊃,/best
     :If IsValidPackageID_WithoutPatchNo version
         version←({⍵/⍨2>+\'-'=⍵}path),'-',version
     :Else
         r←path_,({⍵/⍨2>+\'-'=⍵}best),'-',version
     :EndIf
 :EndIf
⍝Done
