 r←{noBetas}InstallPackages_(identifiers targetFolder);bool;principal;msg;path2cache;cacheFlag;identifier_;success;question;sep;qdmx
 ;buildList;level;requestedBy;packageID2;url;installFolder;tempDir;zipFilename;id;identifier;packageID;alias
⍝ Install package `identifiers` in `targetFolder`.\\
⍝ `identifiers` must be a simple char vector holding the package IDs (possibly incomplete) for one or more packages.
⍝ Multiple packages must be separated by commas.
⍝ `identifierd` must be one (or more) of:
⍝ * an HTTP request for a package
⍝ * a ZIP file holding a package
⍝ * a folder holding a package (like file://C:\Temp\group-name-version\\)
⍝ * a path to a package in a registry (like [RegistryAlias]{group}-{name}-{major.minor.patch} or C:\MyReg\{group}-{name}-{major.minor.patch})
⍝ * a package ID; Tatin will then attempt to find that package in the Registries defined in the Client's config file.\\
⍝ You may omit minor+patch or even major+minor+patch in order to install the latest version.
⍝ By default beta versions are considered in case the package ID is incomplete, but you can suppress them by passing 0 as ⍺.\\
⍝ `←` Full name of packages finally loaded.
 r←''
 noBetas←{0<⎕NC ⍵:⍎⍵ ⋄ Reg.GetNoBetasDefault}'noBetas'
 'Target folder does not eixst'Assert F.IsDir targetFolder
 identifiers←','(≠⊆⊢)identifiers
 :For identifier_ :In identifiers
     (alias identifier_)←SplitAtAlias identifier_
     identifier←ReplaceRegistryAlias identifier_
     ('Unknown',(∧/'[]'∊identifier_)/' alias')Assert 0<≢identifier
     identifier←noBetas CheckVersion identifier
     'Package not found'Assert 0<≢identifier
     PrintToSession'  Attempting to install ',identifier,'...'
     :If ∧/~'\/'∊identifier
     :AndIf '.zip'≢⎕C ¯4↑identifier
         packageID←GetPackageIDFromFilename identifier
         :If ~∨/'/\:'∊identifier
             identifier←(EstablishRegistry packageID),packageID
             PrintToSession⊃{'Installing <',⍵,'> from Registry ',⍺,'...'}/{⍵{(⍵↓⍺)(⍵↑⍺)}1+-'/'⍳⍨⌽⍵}identifier
         :EndIf
     :EndIf
     :If '.zip'≡⎕C ¯4↑identifier
     :AndIf Reg.IsHTTP identifier
         'ZIP files cannot be installed via HTTP'Assert 0
     :EndIf
     PrintToSession'  Establish dependencies...'
     :If 0<≢buildList←GetDependencyTree alias,identifier
         PrintToSession'  ',(⍕≢buildList),' dependenc',((1+1=≢buildList)⊃'ies' 'y'),' identified'
         CheckAliasOnInstall targetFolder alias(GetPackageIDFromFilename identifier)
         :For principal packageID2 url :In ↓buildList
             (alias packageID2)←SplitAtAlias packageID2
             installFolder←(Reg.AddSlash targetFolder),packageID2
             :If principal
                 ('Installation folder "',installFolder,'" is a file')Assert 0=F.IsFile installFolder
             :EndIf
             :If F.IsDir installFolder
                 F.RmDir installFolder
             :AndIf F.IsDir installFolder
                 ⎕DL 0.02
                 msg←'Could not remove install folder (package was apparently already installed):',⎕UCS 13
                 msg,←installFolder
                 msg Assert 0
             :EndIf
             :If MyUserSettings.caching
             :AndIf 0<≢path2cache←CompilePath2PackageInCache url packageID2
             :AndIf 0=GetNoCachingFlag url
             :AndIf 0<≢path2cache
                 PrintToSession'  Fetching from Tatin package cache...'
                 tempDir←GetPackageFromCache url packageID2 path2cache
                 cacheFlag←0
             :Else
                 :Trap 998
                     (success tempDir cacheFlag)←InstallPackage__ packageID2 url
                     :If 0=success
                         sep←⎕UCS 10
                         question←'*** Server:',sep,'   ',url,sep,'does not host the package',sep
                         question,←'   ',packageID2,sep,'Skip? (No=quit whole operation) '
                         :If YesOrNo question
                             ⎕TRAP←0 'S'
                             ∘∘∘  ⍝ Intentional
                             :Continue
                         :Else
                             CloseConnections 0
                             :Return
                         :EndIf
                     :EndIf
                 :Else
                     qdmx←⎕DMX
                     (⊃{0=≢⍺:⍵ ⋄ ⍺}/qdmx.(Message EM))⎕SIGNAL{⍺=0:⍵ ⋄ ⍺}/qdmx.(ENX EN)
                 :EndTrap
             :EndIf
             :If IsHTTP url
             :AndIf cacheFlag
                 installFolder(⎕NCOPY Reg.F.ExecNfunction)tempDir
             :Else
                 installFolder(⎕NMOVE Reg.F.ExecNfunction)tempDir
             :EndIf
             :If principal
                 PrintToSession'  Add ',packageID2,' to dependency file...'
                 targetFolder Dependencies.Add alias,packageID2
             :EndIf
         :EndFor
         buildList[;3]←ReplaceCachePathByURL¨buildList[;3]
         PrintToSession'  Saving build list... '
         buildList←SaveBuildList buildList targetFolder
         :If ∨/bool←({'['∊⍵:⍵↓⍨⍵⍳']' ⋄ ∨/b←'://'⍷⍵:(2+b⍳1)↓⍵ ⋄ ⍵}alias,identifier_){⍺∘≡¨(≢⍺)↑¨⍵}buildList[;2]
             r,←buildList[bool⍳1;2]
         :Else
             r,←buildList[1;2]
         :EndIf
     :EndIf
 :EndFor
 CloseConnections 0
⍝Done
