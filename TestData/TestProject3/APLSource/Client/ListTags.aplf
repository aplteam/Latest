 list←{parms}ListTags y;client;request;res;uri;parms
⍝ `y` might be the path to a Registry or a Registry alias (embraced by []).\\
⍝ By default all tags of all packages are returned as a two-column matrix with
⍝ the tag in [;1] and the number of occurances in [;2].\\
⍝ Optionally `⍺` can be specified. Must be a namespace that might contain `tags` and/or `os_lin`/`os_mac`/`os_win`.
⍝  * `tags` may specify one or more tags (simple comma-separated text vector).
⍝     If that is the case only the tags are returned shared by the packages that carry the specified tag(s)
⍝  * `os_lin`, `osos_mac`, `os_win`: each must be a Boolean when specified.
 :If 0=⎕NC'parms'
     parms←⎕NS''
     parms.tags←''
     parms.(os_lin os_mac os_win)←1
 :Else
     :If 0=parms.⎕NC'tags'
         parms.tags←''
     :EndIf
     :If ∨/0<parms.⎕NC↑'os_lin' 'os_mac' 'os_win'
         :If 0=parms.⎕NC'os_lin'
             parms.os_lin←0
         :EndIf
         :If 0=parms.⎕NC'os_mac'
             parms.os_mac←0
         :EndIf
         :If 0=parms.⎕NC'os_win'
             parms.os_win←0
         :EndIf
     :Else
         parms.(os_lin os_mac os_win)←1
     :EndIf
 :EndIf
 'Invalid left argument: only "tags", "os_lin", "os_mac" and "os_win" are permitted'Assert∧/(' '~¨⍨↓parms.⎕NL 2)∊'tags' 'os_lin' 'os_mac' 'os_win'
 parms.tags←⎕C parms.tags
 uri←ReplaceRegistryAlias y
 'No (valid) Registry specified?!'Assert 0<≢uri
 :If Reg.IsHTTP uri
     list←parms ListTags_ uri
 :Else
     list←Reg.ListTags uri parms
 :EndIf
⍝Done
