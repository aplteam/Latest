 r←Run(path_ recursive stats all noOf);acreFlag;F;A;bool;projects;buff;pathFlag;path;projects1;promaFlag;projects2;ind;ref
⍝ Handles the following cases:
⍝ * Investigate the workspace (simple namespace or #)
⍝ * Investigate (currently tracked/opened) acre projects
⍝ * Investigate (currently tracked/opened) ProMa projects
⍝ * Investigate an acre project that is not currently tracked (not open)
 A←APLTreeUtils2 ⋄ F←FilesAndDirs
 r←''
 pathFlag←acreFlag←0
 path←path_
 :If 0=≢path                            ⍝ Only true if we deal with a project
     :If 9=⎕SE.⎕NC'acre'
         projects1←⎕SE.acre.Projects ⍬
         acreFlag←0<≢projects1
     :EndIf
     :If 0=⎕SE.⎕NC'ProMa'
         {}⎕SE.UCMD'ProMa.Version'
     :EndIf
     projects2←⎕SE.ProMa.ListProjects 0
     :If promaFlag←0<≢projects2
         projects2←(⍪projects2),{⍵.PromaConfig.HOME}∘⍎¨projects2
     :Else
         projects2←0 2⍴⍬
     :EndIf
     :If 0<+/≢¨projects1,projects2
         projects←(projects1,1)⍪(projects2,2)
     :Else
         path←'expand'F.NormalizePath F.PWD,F.CurrentSep  ⍝ Current dir is the best we can do here
         pathFlag←1
     :EndIf
 :ElseIf ~(1⍴path)∊'#⎕'                 ⍝ True if it's a folder path
     path←('expand'F.NormalizePath path),F.CurrentSep
     pathFlag←1
 :EndIf
 :If 0=≢path
 :AndIf 0=acreFlag
     path←F.PWD,F.CurrentSep
     pathFlag←F.IsDir path,'APLSource'
 :EndIf
 :If acreFlag∨promaFlag
     ind←SelectProject{⍵[;0 1],('acre project' 'ProMa project')[⍵[;2]-1]}projects
     →(¯1=ind)/0
     path←1⊃projects[ind;]
     projects1[;1]←{'/'@(⍸'\'=⍵)⊣⍵}¨projects1[;1]
     projects2[;1]←{'/'@(⍸'\'=⍵)⊣⍵}¨projects2[;1]
 :EndIf
 :If acreFlag∨promaFlag∨pathFlag
     path←'expand'F.NormalizePath path,F.CurrentSep
     :If F.IsDir path
         r←⍉⊃('recursive'recursive)('type'(0 1 3))F.Dir path
         r←(r[;1]=2)⌿r                 ⍝ Only regular files
         :If 0=all
             r←(({2⊃⎕NPARTS ⍵}¨r[;0])∊GetExtensions)⌿r
         :EndIf
         r[;2]←↓A.FormatDateTime⊃r[;2]
         r←r[⍋⊃r[;2];0 2]
         :If stats
             r←{⍺(≢⍵)}⌸10↑¨r[;1]
         :Else
      ⍝ `noOf` is ...
      ⍝ ⍬ in case no argument was provided
      ⍝ 0 in case text was provided as argument
      ⍝ An integer otherwise.
             :If ⍬≡noOf
                 r←((10↑¨r[;1])≡¨⊂10↑1⊃r[¯1+≢r;])⌿r
             :ElseIf 0≢noOf
                 :If ¯1=×noOf
                     buff←10↑¨r[;1]  ⍝ YYYY-MM-DD
                     r←(buff∊noOf{(⍺⌊≢⍵)↑⍵}⌽∪⌽buff)⌿r
                 :ElseIf 8=≢⍕noOf ⍝ Is it a date (yyyymmdd)?
                     r←(noOf={↑↑(//)⎕VFI ⍵}¨↓(⊃r[;1])[;0 1 2 3 5 6 8 9])⌿r
                 :Else
                     r←(-noOf⌊≢r)↑r
                 :EndIf
             :EndIf
             :If 0=+/≢¨r[;0]
                 r←0 2⍴''
             :EndIf
             :If 0<≢r
                 :If pathFlag
                     :If (⊂path_)∊'./' '.\'
                         r[;0]←(1+≢F.PWD)↓¨r[;0]
                     :Else
                         r[;0]←(≢path)↓¨r[;0]
                     :EndIf
                 :Else
                     :If (⊂{'/'@(⍸'\'=⍵)⊣⍵}path)∊AddSlash projects1[;1]
                         r[;0]←⎕SE.acre.Itemname r[;0]
                     :ElseIf (⊂{'/'@(⍸'\'=⍵)⊣⍵}path)∊AddSlash projects2[;1]
                         r[;0]←⎕SE.Link.GetItemName{'/'@(⍸'\'=⍵)⊣⍵}¨r[;0]
                     :EndIf
                 :EndIf
             :EndIf
         :EndIf
     :Else
         r←0 0⍴''
     :EndIf
 :ElseIf ((,'#')≡,path)∨(('⎕SE')≡1 ⎕C,path)∨9=⎕NC path
     :If 0=≢noOf
     :AndIf 0=stats
         noOf←¯1
     :EndIf
     :If (,'#')≡,path
         r←List noOf 1
     :Else
         r←path List noOf 1
     :EndIf
     :If stats
         r←{⍺(≢⍵)}⌸10↑¨r[;1]
     :ElseIf 0=recursive
         r←(~'.'∊¨(1+≢path)↓¨r[;0])⌿r
     :EndIf
 :Else
     r←'Nothing found'
 :EndIf
