 r←Test_Server_505(stopFlag batchFlag);⎕TRAP;dir;src;zip;serverPath;body;cfg;packageID;rc;msg;list1;list2;oldPolicy;zipFilename
⍝ Publish a beta package and attempt to delete it when the server's delete policy is "just betas"
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 r←T._Failed

 #.⎕EX TC.GetTatinRootSpace'#'
 dir←∆GetTempDir ⍬
 (src zip)←(⊂dir,'/'),¨'src' 'zip'
 F.MkDir src zip
 serverPath←∆GetServerPath
 packageID←'test-Package_A-0.1.0-alpha-1'
 Assert 0=⊃F.RmDir serverPath,'/',packageID
 ∆RecompileIndexOnServer

 body←':Namespace Test' 'foo←{' '⍵' '}' ':EndNamespace'
 (⊂body)F.NPUT src,'/Test.apln'
 cfg←TC.InitPackageConfig ⍬
 cfg.group←'test'
 cfg.name←'Package_A'
 cfg.version←'0.1.0-alpha-1'
 cfg.source←'Test.apln'
 cfg.os_win←1
 cfg.license←'MIT'
 TC.WritePackageConfigFile src cfg

 (rc msg zipFilename)←TC.PublishPackage src(TC.ReplaceRegistryAlias'[localhost]')
 →T.GoToTidyUp 200≠rc
 →T.GoToTidyUp 0≠≢msg

 ∆RecompileIndexOnServer
 list1←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
 oldPolicy←∆SetServerPolicy'JustBetas'
 (rc msg)←TC.DeletePackage((TC.ReplaceRegistryAlias'[localhost]')),packageID
 Assert 200=rc
 list2←({⍵.aggregate←0 ⋄ ⍵}⎕NS'')TC.ListPackages(TC.ReplaceRegistryAlias'[localhost]')
 →T.GoToTidyUp'test-Package_A-0.1.0-alpha-1'≢∊list1[;1]~list2[;1]

 r←T._OK

∆TidyUp:
 Assert 0=⊃F.RmDir dir
 Assert 0=⊃F.RmDir serverPath,'/',packageID
 F.DeleteFile(739⌶0),'/',packageID,'.zip'
 ∆RecompileIndexOnServer
 ∆SetServerPolicy oldPolicy
⍝Done
