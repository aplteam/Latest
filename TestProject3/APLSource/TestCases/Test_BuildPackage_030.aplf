 r←Test_BuildPackage_030(stopFlag batchFlag);⎕TRAP;rc;msg;parms
 ;dir;src;dist;cfg;zipfile;ns;list;expected
⍝ Has assets and does not specify the source which is a folder
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')
 r←T._Failed

 #.⎕EX TC.GetTatinRootSpace'#'
 dir←∆GetTempDir ⍬
 (src dist)←(⊂dir,'/'),¨'src' 'dist'
 src,←'/v0.1.0'
 F.MkDir(src,'/source')dist
 F.MkDir(src,'/documents')dist
 F.MkDir src,'/assets'

 ('foo1←{1}')F.NPUT src,'/source/foo1.apln'
 ('foo2←{2}')F.NPUT src,'/source/foo2.apln'
 (⊂'a=1' 'b=2')F.NPUT src,'/assets/config.txt'
 (⊂'This' 'That')F.NPUT src,'/documents/user_guide.txt'
 cfg←TC.InitPackageConfig ⍬
 cfg.group←'Example'
 cfg.name←'Package_B'
 cfg.version←'0.1.0'
 cfg.assets←'assets'
 cfg.files←'documents/user_guide.txt'
 cfg.source←'source'
 cfg.os_win←1
 TC.WritePackageConfigFile src cfg

 parms←TC.CreateBuildParms src
 parms.targetPath←dist
 zipfile←TC.BuildPackage parms
 →T.GoToTidyUp 0≥≢zipfile
 list←∆GetFileListFromZipArchive zipfile
 expected←'apl-package.json' 'assets\config.txt' 'source\foo1.apln' 'source\foo2.apln' 'user_guide.txt'
 →T.GoToTidyUp~expected ∆LazyMatchPaths list

 r←T._OK

∆TidyUp:
 (rc msg)←F.RmDirByForce dir
 msg Assert rc=0
 #.⎕EX TC.GetTatinRootSpace'#'
⍝Don
