  r←{flags}CheckForLaterVersion path;buildFilename;topLevel;buildList;dependencies;majorVersions;ind;success
⍝ `path` must point to a folder with installed packages, meaning that there
⍝ must be a file apl-buildlist.json available. This is mandatory.
⍝ The optional left argument can carry flags as a single integer:
⍝  1. Major: should later major version be listed as well? Defaults to 0
⍝  2. Dependencies: should dependencies be checked as well? Defaults to 0
⍝ You may specify both flags as true by passing a 3, or only the second one as 2.\\
⍝ Checks whether there are later versions available for what's specified by the build list.\\
⍝ By default only minor and patch are part of the check. By specifying 1 as `major`
⍝ you may change this default behaviour and list any later major versions instead.\\
⍝ This function scans all known registries **with a priority greater than zero**!\\
⍝ It does **not** check whether a particular version is now available from a different Tatin
⍝ Registry then it was originally installed from.
⍝ Returns a matrix with these columns:
⍝ [;1] Original package ID
⍝ [;2] "Latest" package ID
⍝ [;3] Original URL
⍝ [;4] Flag; 1 means Server did respond
⍝ [;5] URL the latest version was found at but empty in case it's identical with [;3]
 r←0 5⍴⍬
 flags←{0<⎕NC ⍵:⍎⍵ ⋄ 0}'flags'
 'Invalid left argument'Assert 83=⎕DR flags
 'Invalid right argument'Assert(' '=1↑0⍴⊂path)∧(1=≡path)
 (majorVersions dependencies)←2↑Reg.IntToBits flags
 path←Reg.AddSlash path
 'Folder does not exist'Assert F.IsDir path
 buildFilename←path,Reg.BuildListFilename
 ('File not found: ',buildFilename)Assert F.IsFile buildFilename
 buildList←Reg.JSON⊃F.NGET buildFilename
 EstablishEmptyPermanentConnections 0
 :If 0<≢buildList.packageID
     r←↑majorVersions CheckForLaterVersion_¨(dependencies⌈buildList.principal)/buildList.packageID
     r,←r[;3]
     r[;3]←(dependencies∨buildList.principal)⌿buildList.url
     r[;3 5]←{IsHTTP ⍵:⍵ ⋄ 0=≢⍵~' ':'' ⋄ 'expand'F.NormalizePath ⍵}¨r[;3 5]
     :If 0<≢ind←⍸~r[;4]
         r[ind;5]←⊂''
     :EndIf
     CloseConnections 0
 :EndIf
